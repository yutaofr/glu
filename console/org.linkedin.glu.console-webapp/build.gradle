/*
 * Copyright (c) 2010-2010 LinkedIn, Inc
 * Portions Copyright (c) 2011-2015 Yan Pujante
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

import org.linkedin.gradle.tasks.SingleArtifactTask
import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'groovy'

dependencies {
  compile project(':agent:org.linkedin.glu.agent-api')
  compile project(':agent:org.linkedin.glu.agent-rest-client')
  compile project(':agent:org.linkedin.glu.agent-tracker')
  compile project(':orchestration:org.linkedin.glu.orchestration-engine')
  compile spec.external.utilsMiscGroovy
  compile spec.external.utilsZookeeperImpl
  compile spec.external.jbcrypt

  compile spec.external.groovy

  runtime spec.external.hsqldb
  runtime spec.external.log4j
}

def grailsExe = file("grailsw").canonicalPath

def facets = """
<component name="FacetManager">
  <facet type="Spring" name="Spring">
    <configuration>
      <fileset id="Grails" name="Grails" removed="false">
        <file>file://\$MODULE_DIR\$/web-app/WEB-INF/applicationContext.xml</file>
      </fileset>
    </configuration>
  </facet>
  <facet type="web" name="GrailsWeb">
    <configuration>
      <webroots>
        <root url="file://\$MODULE_DIR\$/web-app" relative="/" />
      </webroots>
      <sourceRoots />
    </configuration>
  </facet>
</component>
"""

idea.module.iml {
  whenMerged { module ->
    ['grails-app/utils', 'grails-app/controllers', 'grails-app/domain', 'grails-app/services', 'grails-app/realms', 'grails-app/taglib', 'grails-app/conf'].each {
      module.sourceFolders << new org.gradle.plugins.ide.idea.model.Path("file://\$MODULE_DIR\$/${it}")
    }
    ['test/unit', 'test/integration'].each {
      module.testSourceFolders << new org.gradle.plugins.ide.idea.model.Path("file://\$MODULE_DIR\$/${it}")
    }
  }

  withXml { root ->
    // add facets
    root.asNode().append(new XmlParser().parseText(facets))
    
    // add grails library
    root.asNode().component.find { it.@name == 'NewModuleRootManager'}.appendNode('orderEntry', [type: 'library', name: "grails-${spec.versions.grails}", level: 'application'])
  }
}

project.clean << {
  fileTree(dir: 'lib').each { it.delete() }
}

task lib(dependsOn: jar) << {
  fileTree(dir: 'lib').each { it.delete() }
  copy {
    from configurations.runtime
    into 'lib'
    // issue is that we end up with duplicate files (with slightly different names!) because grails
    // add them!
    exclude("spring-*.jar")
    exclude("slf4j-log4j12-*.jar")
  }

  //fileTree('lib').include('spring-*.jar').each { it.delete() }

  def keysDir = new File(rootDir, 'dev-keys')
  def secretKeyStoreDir = new File(buildDir, 'conf')
  copy {
    from new File(keysDir, 'console.secretkeystore')
    into secretKeyStoreDir
  }

  new File("${projectDir}/lib/build.properties.groovy").text = """
console.keystorePath="${new File(keysDir, 'console.keystore').canonicalPath}"
console.secretkeystorePath="${new File(secretKeyStoreDir, 'console.secretkeystore').canonicalPath}"
console.truststorePath="${new File(keysDir, 'agent.truststore').canonicalPath}"
console.commandsService.commandExecutionIOStorage.filesystem.rootDir="${buildDir}/commands"
"""

  // generate a hello world system for dev
  def helloWorldScript = 
    new File("${rootDir}/scripts/org.linkedin.glu.script-hello-world/src/main/groovy/HelloWorldScript.groovy")
  copy {
    from("dev/hello-world-system.json") {
      filter(tokens: ['script.url': helloWorldScript.canonicalFile.toURI().toString()], ReplaceTokens)
     }
    into "${buildDir}/systems"
  }

  logger.lifecycle "Created dev system under: ${new File(buildDir, 'systems/hello-world-system.json')}"
}

def computeGrailsArgLine(String javaProperties, String taskName, String taskArgs)
{
  "${javaProperties ?: ''} -Dgrails.project.work.dir=${buildDir} ${taskName} ${taskArgs ?: ''}"
}

['run-app', 'test-app'].each { taskName ->
  task "${taskName}"(dependsOn: lib) << {

    ant.exec(dir: '.', executable: grailsExe, failonerror: true) {
      arg(line: computeGrailsArgLine(null, taskName, null))
    }
  }
}

task "test-integration"(dependsOn: lib) << {
  ant.exec(dir: '.', executable: grailsExe, failonerror: true) {
    arg(line: computeGrailsArgLine(null, 'test-app', 'integration:integration'))
  }
}

def warFile = new File("${buildDir}/distributions/${project.name}-${project.version}.war")

task war(dependsOn: lib) << {
  ant.exec(dir: '.', executable: grailsExe, failonerror: true) {
    arg(line: computeGrailsArgLine("-Dgrails.project.war.file=${warFile} -Dbuild.version=${project.version}",
                                   "war",
                                   null))
  }
}

task([type: SingleArtifactTask, dependsOn: 'war'], 'package-war') {
  artifactFile        = warFile
  artifactReleaseInfo =
    [
        name:           project.name,
        extension:      'war',
        configurations: ['war']
    ]
}

task test(overwrite:true, dependsOn: 'test-app') << {
  // nothing to do... test-app will do it
}

// external plugin
//buildscript {
//  repositories {
//    mavenCentral()
//    mavenRepo urls: "http://repository.jboss.org/maven2/"
//  }
//
//  dependencies {
//    classpath "org.grails:grails-gradle-plugin:1.0",
//              "org.grails:grails-bootstrap:${grailsVersion}"
//  }
//}
//
//apply plugin: "grails"
//
//repositories {
//  mavenRepo urls: "http://repository.jboss.org/maven2/"
//}
//
//dependencies {
//  compile "org.grails:grails-crud:${grailsVersion}"
//  compile "org.grails:grails-gorm:${grailsVersion}"
//
//  compile project(':kiwidoc:com.pongasoft.kiwidoc.index.api')
//  compile project(':kiwidoc:com.pongasoft.kiwidoc.index.impl')
//  compile project(':kiwidoc:com.pongasoft.kiwidoc.builder')
//  compile project(':utils:util.html')
//
//  runtime spec.external.slf4jLog4j
//}
//
